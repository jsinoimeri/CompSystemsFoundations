					;
					; 	Name: Jeton Sinoimeri
					; 	Student number: 100875046
					;
					;	SYSC2001 Lab1b
					;
					; Note that many lines in this program are WRONG. These lines are marked with
					; a ***FIX ME comment. You need to figure out how to fix each of these lines.
					;
					
					
					;; CONSTANTS
					; In this case we are defining the symbol 'Display' to have the value
					;  of 04E9h - the address of the Libra display screen
					;
					
					Display	.EQU 04E9h	; address of Libra display
					
					; Define a memory location where the series of numbers to be printed will be start
					; ** You will have to manually enter these numbers in memory in Libra prior to running your code!
					
					NumAddr .EQU 0050h
					
					
					;
					;	Program: PrtNum - print the number in AL on the screen by converting to ASCII 
					;
					;
					  	
					Main:
					;
					; We must do some initialization
					; First, we must initialize our pointer (BX) to point to the first number in memory that 
					; we wish to print (You will have to set the contents of memory!)
					; To do this, we use immediate addressing mode to set BX==NumAddr
					;
					
0000	C7C35000			mov BX, NumAddr
0004	C7C2E904			mov DX, Display
					
					;
					; The next statement defines another address - the beginning of the print loop
					;
					
					mainLoop:
					;
					; Place the number to print into the 'AH' register
					;
					
0008	8A27			MOV AH, [BX]		; ***FIX ME. Should load next number to be printed into AH
					
					; Now we need to check if it we are done printing. If AH contains a zero, then quit.
					;
					
000A	80FC00			cmp AH, 0		; ***FIX ME. Is the number a 0 ?
000D	7426			JE EndPrt		; ***FIX ME. if so, we are done
					
					; Now check if the number in AH is positive. 
					 
000F	80FC00			CMP AH,0
0012	7F05			JG posNum		; ***FIX ME. SHOULD jump to 'posNum' label iff AH is positive.
					
					negNum:
					; If we get here, then our number is negative. We need to first print a negative sign
					; and then convert our number to its positive equivalent before printing
					
					; Print a negative sign
					
0014	B02D			mov AL, '-'		; ***FIX ME. Load the correct character to be printed into AL
0016	EE			out DX, AL		; Send the character out to the display port
						
					; Convert the negative number in AH to a positive number. This can be accomplished with a single instruction!
					
0017	F6DC			NEG AH			; ***FIX ME. Change to the correct instruction. See the p86reference sheet.
					
					posNum:
					; If we get here, then our number is now positive (or always was).
					; We need to convert the number to its ASCII equivalent and print it
					
0019	80FC0A		   CMP AH, 10 ; Compares AH with 10
001C	7C08		   JL printPos ; Jumps to printPos iff it is less than ten
					
					; If it is in the tens than it will substract 10 from AH
					; storing it in AH and move to result to CL and than mov 1 to AH
					
001E	80EC10		   SUB AH, 10h	; substracts 10 from AH and stores result in AH
0021	B001		   MOV AL, 1
0023	0430		   ADD AL, 30h		; ***FIX ME. Should add required offset to convert number to ASCII representation
						 
0025	EE			 out DX, AL	; print the char
					
					printPos:
0026	88E0			MOV AL, AH		; ***FIX ME. Should copy number to be printed into register AL
0028	0430			ADD AL, 30h		; ***FIX ME. Should add required offset to convert number to ASCII representation
002A	EE			out DX, AL		; print the char
					
					; Print a carriage return, so that the next number is printed on a new line
002B	B00D			MOV AL, 13		; ***FIX ME. Should load carriage return (CR) into AL
002D	EE			out DX, AL		; print the CR
						
002E	B00A			MOV AL, 10		; ***FIX ME. Should load line feed (LF) into AL	
0030	EE			out DX, AL		; print the LF
					
					; Look at the next number to be printed
					
0031	43			inc BX			; step along the array of numbers to the next number
					
					;
					; The next statement is an unconditional jump back to the beginning of the loop
					; "Unconditional" means that the jump is ALWAYS taken (no CMP needed).
					;
					
0032	E9D3FF			jmp mainLoop; loop back
						
					EndPrt:
0035	F4			HLT			; Stop the Libra processor
					
